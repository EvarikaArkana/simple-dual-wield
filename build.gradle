import groovy.json.JsonSlurper

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
	}
}


def getParchmentWithDecrementedMC(minecraftVersion) {
	def url = 'https://versioning.parchmentmc.org/versions'
	def json = new JsonSlurper().parseText(new URI(url).toURL().text)
	def releases = json.releases

	// Truncate version after first non-integer/dot
	def releaseVersion = minecraftVersion.replaceAll(/[^0-9.].*/, '')

	def versionParts = releaseVersion.toString().split('\\.')
	if (versionParts.size() == 2) versionParts << "0"
	if (versionParts.size() < 2 || versionParts.size() > 3) throw new GradleException("Invalid Minecraft version format: $minecraftVersion")
	def (major, minor, patch) = versionParts.collect { it as Integer }
	def decrementedVersion = patch < 1 ? "$major.${minor - 1}.99" : "$major.$minor.${patch - 1}"

	while (!releases["$major.$minor.$patch"]) {
		if (patch > 0) {
			patch--
		} else {
			if (minor == 0) break
			minor--
			patch = 7
		}
	}

	def foundVersion = "$major.$minor.$patch"
	if (releases[foundVersion]) {
		def parchmentDate = releases[foundVersion]
		logger.print("Parchment: " + foundVersion + " + " + parchmentDate as String + "\n")
		return [decrementedVersion, foundVersion, parchmentDate]
	}

	throw new GradleException("No valid Parchment version found for $minecraftVersion or earlier.")
}

def (decrementedVersion, pMinecraftVersion, mostRecentParchmentDate) = getParchmentWithDecrementedMC(project.minecraft_version)

loom {
	splitEnvironmentSourceSets()

	mods {
		"simple-dual-wield" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath = file("src/client/resources/dualwield.accesswidener")

}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${pMinecraftVersion}:${mostRecentParchmentDate}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}